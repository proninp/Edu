using System;
using System.Collections.Generic;
using System.IO.IsolatedStorage;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeWars._5kyu
{
    /*
     * Fibonacci numbers are generated by setting F0 = 0, F1 = 1, and then using the formula:
     * Fn = Fn-1 + Fn-2
     * Your task is to efficiently calculate the nth element in the Fibonacci sequence and
     * then count the occurrence of each digit in the number.
     * Return a list of integer pairs sorted in descending order.
     */
    internal class CalculateFibReturnDigitPccurrencesCount
    {
        public static List<Tuple<int, int>> FibDigits(int n)
        {
            long fib = Fib(n);
            Dictionary<int, int> map = GetFibDictionaryDigits(fib);
            return map.Select(x => new Tuple<int, int>(x.Value, x.Key)).ToList();

        }
        static long Fib(int n)
        {
            if (n == 0 || n == 1)
                return n;
            long[] ar = new long[n+1];
            ar[0] = 0;
            ar[1] = 1;
            for (int i = 2; i <= n; i++)
                ar[i] = ar[i - 2] + ar[i - 1];
            return ar[n];
        }
        static Dictionary<int, int> GetFibDictionaryDigits(long fibNumber)
        {
            Dictionary<int, int> fibDictionary = new Dictionary<int, int>();
            while (fibNumber > 0)
            {
                int fibDigit = (int) (fibNumber % 10);
                fibNumber /= 10;
                if (!fibDictionary.ContainsKey(fibDigit))
                    fibDictionary.Add(fibDigit, 1);
                else
                    fibDictionary[fibDigit]++;
            }
            return fibDictionary;
        }

    }
}
